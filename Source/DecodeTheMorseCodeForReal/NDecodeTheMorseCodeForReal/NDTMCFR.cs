using System;
using DecodeTheMorseCodeForReal;
using NUnit.Framework;
using Shouldly;

namespace NDecodeTheMorseCodeForReal
{
    [TestFixture]
    public class NDTMCFR
    {
        private readonly DTMCFR _testObj = new DTMCFR();

        [Test]
        public void BasicKataTest()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000"))
                .ShouldBe("HEY JUDE");
        }

        [Test]
        public void SingleWord()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "000000001101101001110000011000000111111010011111001111110000000000"))
                .ShouldBe("HEY");
        }

        [Test]
        public void SingleWord2()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "00000000000111011111111011111011111000000101100011111100000111110011101100000100000"))
                .ShouldBe("JUDE");
        }

        [Test]
        public void DashesOnly()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "000000001111011110111100011110111101111000111101111011110000000000"))
                .ShouldBe("OOO");
        }

        [Test]
        public void DashesOnlyShorter()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "000000001111011110001111011110001111011110000000000"))
                .ShouldBe("MMM");
        }

        [Test]
        public void DotsOnly()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                //"000000001101101101100011011011011000110110110110000000000000"))  //ten przyklad nie pasuje do podzialu 1-3-7, przerwa pomiedzy znakami jest za krotka
                "00000000110011001100110000110011001100110000110011001100110000000000000"))
                .ShouldBe("HHH");
        }

        [Test]
        public void ESpaceETest()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "10000001"))
                .ShouldBe("E E");
        }

        [Test]
        public void EmptyString()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    ""))
                .ShouldBe("");
        }

        [Test]
        public void OnlyZeroes()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "00000000000000000000"))
                .ShouldBe("");
        }

        [Test]
        public void KataShortMessages()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "0"))
                .ShouldBe("");
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "000000000000000000000000000000000000000000"))
                .ShouldBe("");
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "1"))
                .ShouldBe("E");
        }

        [Test]
        public void KataLongMessage()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011"))
                .ShouldBe("HEY JUDE");
        }

        [Test]
        public void KataMultipleBitsPerDot()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "111"))
                .ShouldBe("E");
        }

        [Test]
        public void KataExtraZeros()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(
                    "01110"))
                .ShouldBe("E");
        }

        [Test]
        public void KataFinalTest()
        {
            _testObj.decodeMorse(
                _testObj.decodeBitsAdvanced(

                .ShouldBe("E");
            //11111111 0000000 111111111111 00000000000 111111111 00000 111111111 0 1 00000000 111111111111 0 11 0000 11111111 0 11111111111 0000000000000000000
            //8        7       12           11          9         5     9         1 1 8        12           1 2  4    8        1 11          19
            //-- --. -.-- MGY (8-cluster 1)
            //.- --.-..- A? (8-cluster 0)
            //.- --. -..- AGX (8- 1-0, 0-1)
            //-- --.-.-- M?  (8- 1-1, 0-0)
            //- - --. -.-- TTGY (7-cluster 1)
        }
    }
}